openapi: '3.0.2'
info:
  title: WASAPhoto project
  version: '0.0.1'
  description: This API allows users to upload and manage their images and informations
paths:
    /session:
      post:
        tags: ["login"]
        summary: Logs in the user
        description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
        operationId: doLogin
        requestBody:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Maria
                    pattern: Ë†.*?$
                    minLength: 3
                    maxLength: 16
          required: true
        responses:
          "201":
            description: User log-in action successful
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                      type: string
                      example: "abcdef012345"
          "400":
            $ref: '#/components/responses/BadRequestResponse'

    /users/profile/username: #setMyUserName
      parameters:
            - name: username
              in: query
              description: Require user new username 
              required: true
              schema: 
                type: string
      post: 
        operationId: setMyUserName
        summary: Set new username
        description: |
          Updates the exixsting resource userID.
          All userIDs must be unique.
          Setting a new userID require a already logged in user.


        requestBody:
          description: Set new username
          content: 
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 3
                    maxLength: 16
                
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'

    /users/profile/post: 
      post: #upload photo 
        operationId: uploadPhoto
        summary: Upload a new photo 
        description: |
          Submit a new resource.
          Requires a logged in user.
        requestBody:  
          required: true
          content:
            application/json:
              schema: 
                type: object
                properties:
                    image:
                      type: string
                      description: Binary image data
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "201":
            $ref: '#/components/responses/CreatedResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'

      delete: #deletePhoto
        parameters:
        - name: postId
          in: query
          required: true
          schema:
            type: string
        operationId: deletePhoto
        summary: Delete photo
        description: |
          Delete user's photo.
          User must be logged in.
          OwnerID on the photo must match requesting user's ID.

        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
    
    /post/likes:
      parameters:
        - name: postId
          in: query
          required: true
          schema:
            type: string

      post: #likePhoto
        operationId: likePhoto
        summary: Like a photo
        description: |
          Like a user photo.
          Users can like their own photos.
          If user tries to like an already liked photo the request will be accepted but not processed.
  
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
      delete: #unlikephoto
        
        operationId: unlikePhoto
        summary: Unlike photo
        description: |
          Delete user's like to a photo.
          User must be logged in.
          To remove a like the user's ID must be in the list of likes.

        
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'

    /post/commments:      
      parameters:
      - name: postId
        in: query
        required: true
        schema:
          type: string
      
      
      post: #commentPhoto
        operationId: commentPhoto
        summary: Add a comment
        description: |
          Add a comment to an user photo.
          User must be logged in.
        
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'

      delete: #uncomment photo
        parameters:
        - name: commmentId
          in: query
          required: true
          schema:
            type: string
            
        operationId: uncommentPhoto
        summary: uncomment photo
        description: |
          Delete user's comment to a photo.
          User must be logged in.
          Only the Owner of a comment can remove it.
        
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'

    /users/profile/followers: 

      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        
      post:   #followUser
        
        operationId: followUser
        summary: follow another user
        description: |
          User must be logged in.
          A user can't follow another user if he is already in the follow list.
        
        
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'
      delete: #unfollowUser
        
        operationId: unfollowUser
        summary: unfollow an user.
        description: |
          Unfollows user from follower list.
          User must be logged in.
          To unfollow user must be in follower list. 

        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'
    
    /users/profile/ban:
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string

      post: #banUser
        operationId: banUser
        summary: Ban another user
        description: |
          User must be logged in.
          A user can't ban another user if he is already in the ban list.
        
        
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'
      delete: #unbanUser
        
        operationId: unbanUser
        summary: Unban another user
        description: |
          User must be logged in.
          To remove an user from the list he must be put in it first.
        responses:
          "200":
            $ref: '#/components/responses/SuccessResponse'
          "400":
            $ref: '#/components/responses/BadRequestResponse'
          "401":
            $ref: '#/components/responses/UnauthorizedResponse'
          "500":
            $ref: '#/components/responses/InternalServerError'
          
    /users/profile:
      parameters:
        - name: username
          in: query
          required: true
          schema:   
            type: string
      get:
        operationId: getUserProfile
        summary: get user profile
        description: |
          Allows users to fetch their profile page details and others profile page.
          It will show the user's photos, how many photos hav beenn uploaded, 
          and the user's followers and following.
        responses:
          "200":
            description: success 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                    post: 
                      type: array
                      minItems: 0
                      maxItems: 200
                      items: 
                        type: object
                        properties:
                          postID:
                            type: string
                          ownerId:
                            type: string
                          ownerUsername:
                            type: string
                          image:
                            type: string
                            format: binary
                          uploadDate:
                            type: string
                            format: time-date
                            minLength: 3
                            maxLength: 16
                    upNum:
                      type: integer
                    follower: 
                      type: array
                      minItems: 0
                      maxItems: 200
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          username:   
                            type: string

                    following: 
                      type: array
                      minItems: 0
                      maxItems: 200
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          username:   
                            type: string
          "400":
              $ref: '#/components/responses/SuccessResponse'
          "401":
              $ref: '#/components/responses/UnauthorizedResponse'      
          "500":
            $ref: '#/components/responses/InternalServerError'           
                 
    /users/profile/feed: #getMyStream
  
      get:
        operationId: getMyStream
        summary: Present stream of photos
        description: |
          user will be presented with a stream of photos (images) in reverse chronological order, with
          information about when each photo was uploaded (date and time) and how many likes and comments
          it has.
        responses:
          "200":
            description: success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    post: 
                      type: array
                      minItems: 0
                      maxItems: 200
                      items: 
                        type: object
                        properties:
                          postID:
                            type: string
                          ownerId:
                            type: string
                          ownerUsername:
                            type: string
                          image:
                            type: string
                            format: binary
                          uploadDate:
                            type: string
                            format: time-date
                            minLength: 3
                            maxLength: 16
                          
          "400":
              $ref: '#/components/responses/BadRequestResponse'
          "401":
              $ref: '#/components/responses/UnauthorizedResponse'       
          "500":
            $ref: '#/components/responses/InternalServerError'           
                        

components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
  
  responses:
    SuccessResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: New username set successfully
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Internal server error
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The server cannot or will not process the request due to an apparent client error
    CreatedResponse:
      description: Creation of resource successful
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Resource created

    UnauthorizedResponse:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Access token is missing or invalid
security: #apply the security globally to all operations
  - bearerAuth: []  